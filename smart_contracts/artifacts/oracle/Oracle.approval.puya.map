{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/delfi/smart_contracts/oracle/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;;AAmEG;;AAAA;AAAA;AAAA;;AAAA;AAnEH;;;AAAA;AAAA;;AAAA;;;;AAAA;AAmEG;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AA3BA;;AAAA;AAAA;AAAA;;AAAA;AA5BH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;;;AA4BG;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAD;;;AAXA;AAayB;;AAAvB;AAZF;AAa2B;;AAAzB;AAZF;AAa0B;;;;AAAxB;;AAWF;;;AAEgC;;AAAQ;AAvBxC;AAuBwC;AAAA;AAAtC;AAEA;;AAAA;;AACc;;AADd;AAAA;;;AAAA;;AAAA;;AAEmB;;AAFnB;AAAA;;;AAAA;;AAAA;;AAGoC;AA/BtC;AA+BsC;AAAA;AAHpC;AAAA;;;;AAAA;AAMsC;;AAAA;;AAAgB;AAAxB;AAG9B;AAE2B;AAxC7B;AAwC6B;AAAA;AAGjB;;;;;;;;;;;;;;;;;;;;;;AALV;;;AAIgB;;;AAJhB;;;;;;AAcF;;;AAGyB;;AAnDzB;AAmDyC;AAAvC;;AASF;;;AAEa;;AAAsB;AAnEnC;AAmEmC;AAAA;AAA1B;AAAP;AACO;;AAAyB;;AAAzB;AAAP;AAEA;;AAjEF;AAiEE;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 1000"
    },
    "7": {
      "op": "bytecblock \"isWhitelisted\" \"admin\" \"watcher\" \"fee\""
    },
    "41": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "43": {
      "op": "bz main_after_if_else@10",
      "stack_out": []
    },
    "46": {
      "op": "pushbytess 0xb8447b36 0x4840fe00 0x01a3a3ff 0x68e8421d // method \"createApplication()void\", method \"requestData(pay,string,asset,string)void\", method \"optInToApplication()void\", method \"setWhitelist(account,bool)void\""
    },
    "68": {
      "op": "txna ApplicationArgs 0"
    },
    "71": {
      "op": "match main_createApplication_route@3 main_requestData_route@4 main_optInToApplication_route@5 main_setWhitelist_route@6"
    },
    "81": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "82": {
      "op": "return"
    },
    "83": {
      "block": "main_setWhitelist_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "85": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "86": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "87": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "89": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "90": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "93": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "94": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "96": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "99": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%30#0",
        "0"
      ]
    },
    "100": {
      "op": "getbit",
      "defined_out": [
        "tmp%29#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%31#0"
      ]
    },
    "101": {
      "callsub": "smart_contracts/oracle/contract.algo.ts::Oracle.setWhitelist",
      "op": "callsub setWhitelist",
      "stack_out": []
    },
    "104": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "105": {
      "op": "return"
    },
    "106": {
      "block": "main_optInToApplication_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "108": {
      "op": "intc_0 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "OptIn"
      ]
    },
    "109": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "110": {
      "error": "OnCompletion is not OptIn",
      "op": "assert // OnCompletion is not OptIn",
      "stack_out": []
    },
    "111": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "113": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "114": {
      "callsub": "smart_contracts/oracle/contract.algo.ts::Oracle.optInToApplication",
      "op": "callsub optInToApplication"
    },
    "117": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "118": {
      "op": "return"
    },
    "119": {
      "block": "main_requestData_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "121": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "122": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "123": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "125": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "126": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "128": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "1"
      ]
    },
    "129": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "130": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "131": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "133": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "134": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "135": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "136": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%12#0"
      ]
    },
    "139": {
      "op": "extract 2 0",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%13#0"
      ]
    },
    "142": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "145": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "146": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%13#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%13#0",
        "tmp%16#0"
      ]
    },
    "148": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "151": {
      "op": "extract 2 0",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%13#0",
        "tmp%16#0",
        "tmp%18#0"
      ]
    },
    "154": {
      "callsub": "smart_contracts/oracle/contract.algo.ts::Oracle.requestData",
      "op": "callsub requestData",
      "stack_out": []
    },
    "157": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "158": {
      "op": "return"
    },
    "159": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "161": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "162": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "163": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "165": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "166": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "167": {
      "callsub": "smart_contracts/oracle/contract.algo.ts::Oracle.createApplication",
      "op": "callsub createApplication"
    },
    "170": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "171": {
      "op": "return"
    },
    "172": {
      "subroutine": "smart_contracts/oracle/contract.algo.ts::Oracle.createApplication",
      "params": {},
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "175": {
      "op": "bytec_1 // \"admin\""
    },
    "176": {
      "op": "txn Sender",
      "defined_out": [
        "\"admin\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"admin\"",
        "new_state_value%0#0"
      ]
    },
    "178": {
      "op": "app_global_put",
      "stack_out": []
    },
    "179": {
      "op": "bytec_2 // \"watcher\""
    },
    "180": {
      "op": "txn Sender",
      "defined_out": [
        "\"watcher\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "\"watcher\"",
        "new_state_value%1#0"
      ]
    },
    "182": {
      "op": "app_global_put",
      "stack_out": []
    },
    "183": {
      "op": "bytec_3 // \"fee\"",
      "defined_out": [
        "\"fee\""
      ],
      "stack_out": [
        "\"fee\""
      ]
    },
    "184": {
      "op": "pushint 1000000 // 1000000",
      "defined_out": [
        "\"fee\"",
        "1000000"
      ],
      "stack_out": [
        "\"fee\"",
        "1000000"
      ]
    },
    "188": {
      "op": "app_global_put",
      "stack_out": []
    },
    "189": {
      "retsub": true,
      "op": "retsub"
    },
    "190": {
      "subroutine": "smart_contracts/oracle/contract.algo.ts::Oracle.requestData",
      "params": {
        "payment#0": "uint64",
        "pair#0": "bytes",
        "callbackApp#0": "uint64",
        "callbackMethod#0": "bytes"
      },
      "block": "requestData",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "193": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "195": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "196": {
      "op": "bytec_0 // \"isWhitelisted\"",
      "defined_out": [
        "\"isWhitelisted\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"isWhitelisted\""
      ]
    },
    "197": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "198": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "199": {
      "error": "Sender not whitelisted",
      "op": "assert // Sender not whitelisted",
      "stack_out": []
    },
    "200": {
      "op": "frame_dig -4",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "202": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "204": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "206": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "207": {
      "op": "bz requestData_bool_false@4",
      "stack_out": []
    },
    "210": {
      "op": "frame_dig -4"
    },
    "212": {
      "op": "gtxns Receiver"
    },
    "214": {
      "op": "global CurrentApplicationAddress"
    },
    "216": {
      "op": "=="
    },
    "217": {
      "op": "bz requestData_bool_false@4"
    },
    "220": {
      "op": "frame_dig -4"
    },
    "222": {
      "op": "gtxns Amount"
    },
    "224": {
      "op": "intc_1 // 0"
    },
    "225": {
      "op": "bytec_3 // \"fee\""
    },
    "226": {
      "op": "app_global_get_ex"
    },
    "227": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists"
    },
    "228": {
      "op": ">="
    },
    "229": {
      "op": "bz requestData_bool_false@4"
    },
    "232": {
      "op": "intc_0 // 1"
    },
    "233": {
      "block": "requestData_bool_merge@5",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "234": {
      "op": "frame_dig -4",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "236": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "238": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "1000"
      ]
    },
    "239": {
      "op": "-",
      "defined_out": [
        "paymentAmount#0"
      ],
      "stack_out": [
        "paymentAmount#0"
      ]
    },
    "240": {
      "op": "itxn_begin"
    },
    "241": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "paymentAmount#0"
      ],
      "stack_out": [
        "paymentAmount#0",
        "0"
      ]
    },
    "242": {
      "op": "bytec_2 // \"watcher\"",
      "defined_out": [
        "\"watcher\"",
        "0",
        "paymentAmount#0"
      ],
      "stack_out": [
        "paymentAmount#0",
        "0",
        "\"watcher\""
      ]
    },
    "243": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "paymentAmount#0"
      ],
      "stack_out": [
        "paymentAmount#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "244": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "paymentAmount#0",
        "maybe_value%2#0"
      ]
    },
    "245": {
      "op": "pushbytes \"oracle-request\"",
      "defined_out": [
        "\"oracle-request\"",
        "maybe_value%2#0",
        "paymentAmount#0"
      ],
      "stack_out": [
        "paymentAmount#0",
        "maybe_value%2#0",
        "\"oracle-request\""
      ]
    },
    "261": {
      "op": "itxn_field Note",
      "stack_out": [
        "paymentAmount#0",
        "maybe_value%2#0"
      ]
    },
    "263": {
      "op": "itxn_field Receiver"
    },
    "265": {
      "op": "itxn_field Amount",
      "stack_out": []
    },
    "267": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "268": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "270": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "1000"
      ]
    },
    "271": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "273": {
      "op": "itxn_submit"
    },
    "274": {
      "retsub": true,
      "op": "retsub"
    },
    "275": {
      "block": "requestData_bool_false@4",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "276": {
      "op": "b requestData_bool_merge@5"
    },
    "279": {
      "subroutine": "smart_contracts/oracle/contract.algo.ts::Oracle.optInToApplication",
      "params": {},
      "block": "optInToApplication",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "282": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "284": {
      "op": "bytec_0 // \"isWhitelisted\"",
      "defined_out": [
        "\"isWhitelisted\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"isWhitelisted\""
      ]
    },
    "285": {
      "op": "intc_0 // 1",
      "defined_out": [
        "\"isWhitelisted\"",
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"isWhitelisted\"",
        "1"
      ]
    },
    "286": {
      "op": "app_local_put",
      "stack_out": []
    },
    "287": {
      "retsub": true,
      "op": "retsub"
    },
    "288": {
      "subroutine": "smart_contracts/oracle/contract.algo.ts::Oracle.setWhitelist",
      "params": {
        "account#0": "bytes",
        "status#0": "uint64"
      },
      "block": "setWhitelist",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "291": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "293": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "294": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "295": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "296": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "297": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "298": {
      "error": "Only admin can modify whitelist status",
      "op": "assert // Only admin can modify whitelist status",
      "stack_out": []
    },
    "299": {
      "op": "frame_dig -2"
    },
    "301": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "account#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "account#0 (copy)",
        "tmp%2#0"
      ]
    },
    "303": {
      "op": "app_opted_in",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "304": {
      "error": "Account must opt in to contract first",
      "op": "assert // Account must opt in to contract first",
      "stack_out": []
    },
    "305": {
      "op": "frame_dig -2",
      "stack_out": [
        "account#0 (copy)"
      ]
    },
    "307": {
      "op": "bytec_0 // \"isWhitelisted\"",
      "defined_out": [
        "\"isWhitelisted\"",
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)",
        "\"isWhitelisted\""
      ]
    },
    "308": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"isWhitelisted\"",
        "account#0 (copy)",
        "status#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)",
        "\"isWhitelisted\"",
        "status#0 (copy)"
      ]
    },
    "310": {
      "op": "app_local_put",
      "stack_out": []
    },
    "311": {
      "retsub": true,
      "op": "retsub"
    }
  }
}