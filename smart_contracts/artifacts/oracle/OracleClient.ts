/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Oracle","structs":{},"methods":[{"name":"createApplication","args":[],"returns":{"type":"void","desc":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"desc":"Initialize the contract with default values","events":[],"recommendations":{}},{"name":"requestData","args":[{"type":"pay","name":"payment","desc":"Payment transaction for the request"},{"type":"string","name":"pair","desc":"The trading pair to request data for"},{"type":"asset","name":"callbackApp","desc":"Asset ID of the callback application"},{"type":"string","name":"callbackMethod","desc":"Name of the callback method"}],"returns":{"type":"void","desc":"void"},"actions":{"create":[],"call":["OptIn"]},"readonly":false,"desc":"Request data from the oracle","events":[],"recommendations":{}},{"name":"optInToApplication","args":[],"returns":{"type":"void","desc":"void"},"actions":{"create":[],"call":["OptIn"]},"readonly":false,"desc":"Opt in to the oracle application","events":[],"recommendations":{}},{"name":"setWhitelist","args":[{"type":"account","name":"account","desc":"The account to modify whitelist status for"},{"type":"bool","name":"status","desc":"True to whitelist, false to remove from whitelist"}],"returns":{"type":"void","desc":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Set whitelist status for an account","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"Oracle contract for handling data requests and whitelisting","networks":{},"state":{"schema":{"global":{"ints":1,"bytes":2},"local":{"ints":1,"bytes":0}},"keys":{"global":{"admin":{"keyType":"AVMString","valueType":"AVMBytes","key":"YWRtaW4="},"watcher":{"keyType":"AVMString","valueType":"AVMBytes","key":"d2F0Y2hlcg=="},"fee":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZmVl"}},"local":{"isWhitelisted":{"keyType":"AVMString","valueType":"AVMUint64","key":"aXNXaGl0ZWxpc3RlZA=="}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[305],"errorMessage":"Account must opt in to contract first"},{"pc":[86,163],"errorMessage":"OnCompletion is not NoOp"},{"pc":[110,123],"errorMessage":"OnCompletion is not OptIn"},{"pc":[299],"errorMessage":"Only admin can modify whitelist status"},{"pc":[200],"errorMessage":"Sender not whitelisted"},{"pc":[234],"errorMessage":"assert target is match for conditions"},{"pc":[167],"errorMessage":"can only call when creating"},{"pc":[89,113,126],"errorMessage":"can only call when not creating"},{"pc":[228,245,297],"errorMessage":"check GlobalState exists"},{"pc":[199],"errorMessage":"check LocalState exists"},{"pc":[136],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSAwIDEwMDAKICAgIGJ5dGVjYmxvY2sgImlzV2hpdGVsaXN0ZWQiICJhZG1pbiIgIndhdGNoZXIiICJmZWUiCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3JhY2xlL2NvbnRyYWN0LmFsZ28udHM6MTgKICAgIC8vIGV4cG9ydCBjbGFzcyBPcmFjbGUgZXh0ZW5kcyBhcmM0LkNvbnRyYWN0IHsKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2FmdGVyX2lmX2Vsc2VAMTAKICAgIHB1c2hieXRlc3MgMHhiODQ0N2IzNiAweDQ4NDBmZTAwIDB4MDFhM2EzZmYgMHg2OGU4NDIxZCAvLyBtZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkIiwgbWV0aG9kICJyZXF1ZXN0RGF0YShwYXksc3RyaW5nLGFzc2V0LHN0cmluZyl2b2lkIiwgbWV0aG9kICJvcHRJblRvQXBwbGljYXRpb24oKXZvaWQiLCBtZXRob2QgInNldFdoaXRlbGlzdChhY2NvdW50LGJvb2wpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fY3JlYXRlQXBwbGljYXRpb25fcm91dGVAMyBtYWluX3JlcXVlc3REYXRhX3JvdXRlQDQgbWFpbl9vcHRJblRvQXBwbGljYXRpb25fcm91dGVANSBtYWluX3NldFdoaXRlbGlzdF9yb3V0ZUA2CgptYWluX2FmdGVyX2lmX2Vsc2VAMTA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3JhY2xlL2NvbnRyYWN0LmFsZ28udHM6MTgKICAgIC8vIGV4cG9ydCBjbGFzcyBPcmFjbGUgZXh0ZW5kcyBhcmM0LkNvbnRyYWN0IHsKICAgIGludGNfMSAvLyAwCiAgICByZXR1cm4KCm1haW5fc2V0V2hpdGVsaXN0X3JvdXRlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3JhY2xlL2NvbnRyYWN0LmFsZ28udHM6ODYKICAgIC8vIEBhYmltZXRob2QoeyBhbGxvd0FjdGlvbnM6ICdOb09wJyB9KQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3JhY2xlL2NvbnRyYWN0LmFsZ28udHM6MTgKICAgIC8vIGV4cG9ydCBjbGFzcyBPcmFjbGUgZXh0ZW5kcyBhcmM0LkNvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmFzIEFjY291bnRzCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBpbnRjXzEgLy8gMAogICAgZ2V0Yml0CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3JhY2xlL2NvbnRyYWN0LmFsZ28udHM6ODYKICAgIC8vIEBhYmltZXRob2QoeyBhbGxvd0FjdGlvbnM6ICdOb09wJyB9KQogICAgY2FsbHN1YiBzZXRXaGl0ZWxpc3QKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fb3B0SW5Ub0FwcGxpY2F0aW9uX3JvdXRlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3JhY2xlL2NvbnRyYWN0LmFsZ28udHM6NzQKICAgIC8vIEBhYmltZXRob2QoeyBhbGxvd0FjdGlvbnM6ICdPcHRJbicgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludGNfMCAvLyBPcHRJbgogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE9wdEluCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgb3B0SW5Ub0FwcGxpY2F0aW9uCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3JlcXVlc3REYXRhX3JvdXRlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3JhY2xlL2NvbnRyYWN0LmFsZ28udHM6NDYKICAgIC8vIEBhYmltZXRob2QoeyBhbGxvd0FjdGlvbnM6ICdPcHRJbicgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludGNfMCAvLyBPcHRJbgogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE9wdEluCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcmFjbGUvY29udHJhY3QuYWxnby50czoxOAogICAgLy8gZXhwb3J0IGNsYXNzIE9yYWNsZSBleHRlbmRzIGFyYzQuQ29udHJhY3QgewogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMCAvLyAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgdHhuYXMgQXNzZXRzCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICBleHRyYWN0IDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL29yYWNsZS9jb250cmFjdC5hbGdvLnRzOjQ2CiAgICAvLyBAYWJpbWV0aG9kKHsgYWxsb3dBY3Rpb25zOiAnT3B0SW4nIH0pCiAgICBjYWxsc3ViIHJlcXVlc3REYXRhCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2NyZWF0ZUFwcGxpY2F0aW9uX3JvdXRlQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3JhY2xlL2NvbnRyYWN0LmFsZ28udHM6MzEKICAgIC8vIEBhYmltZXRob2QoeyBvbkNyZWF0ZTogJ3JlcXVpcmUnIH0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgY2FsbHN1YiBjcmVhdGVBcHBsaWNhdGlvbgogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9vcmFjbGUvY29udHJhY3QuYWxnby50czo6T3JhY2xlLmNyZWF0ZUFwcGxpY2F0aW9uKCkgLT4gdm9pZDoKY3JlYXRlQXBwbGljYXRpb246CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3JhY2xlL2NvbnRyYWN0LmFsZ28udHM6MzEtMzIKICAgIC8vIEBhYmltZXRob2QoeyBvbkNyZWF0ZTogJ3JlcXVpcmUnIH0pCiAgICAvLyBwdWJsaWMgY3JlYXRlQXBwbGljYXRpb24oKTogdm9pZCB7CiAgICBwcm90byAwIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcmFjbGUvY29udHJhY3QuYWxnby50czoyMAogICAgLy8gYWRtaW4gPSBHbG9iYWxTdGF0ZTxBY2NvdW50PigpCiAgICBieXRlY18xIC8vICJhZG1pbiIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcmFjbGUvY29udHJhY3QuYWxnby50czozMwogICAgLy8gdGhpcy5hZG1pbi52YWx1ZSA9IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcmFjbGUvY29udHJhY3QuYWxnby50czoyMQogICAgLy8gd2F0Y2hlciA9IEdsb2JhbFN0YXRlPEFjY291bnQ+KCkKICAgIGJ5dGVjXzIgLy8gIndhdGNoZXIiCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3JhY2xlL2NvbnRyYWN0LmFsZ28udHM6MzQKICAgIC8vIHRoaXMud2F0Y2hlci52YWx1ZSA9IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcmFjbGUvY29udHJhY3QuYWxnby50czoyMgogICAgLy8gZmVlID0gR2xvYmFsU3RhdGU8dWludDY0PigpCiAgICBieXRlY18zIC8vICJmZWUiCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3JhY2xlL2NvbnRyYWN0LmFsZ28udHM6MzUKICAgIC8vIHRoaXMuZmVlLnZhbHVlID0gVWludDY0KDFfMDAwXzAwMCkgLy8gMSBBTEdPIGluIG1pY3JvYWxnb3MKICAgIHB1c2hpbnQgMTAwMDAwMCAvLyAxMDAwMDAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL29yYWNsZS9jb250cmFjdC5hbGdvLnRzOjpPcmFjbGUucmVxdWVzdERhdGEocGF5bWVudDogdWludDY0LCBwYWlyOiBieXRlcywgY2FsbGJhY2tBcHA6IHVpbnQ2NCwgY2FsbGJhY2tNZXRob2Q6IGJ5dGVzKSAtPiB2b2lkOgpyZXF1ZXN0RGF0YToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcmFjbGUvY29udHJhY3QuYWxnby50czo0Ni00NwogICAgLy8gQGFiaW1ldGhvZCh7IGFsbG93QWN0aW9uczogJ09wdEluJyB9KQogICAgLy8gcHVibGljIHJlcXVlc3REYXRhKHBheW1lbnQ6IGd0eG4uUGF5bWVudFR4biwgcGFpcjogc3RyaW5nLCBjYWxsYmFja0FwcDogQXNzZXQsIGNhbGxiYWNrTWV0aG9kOiBzdHJpbmcpOiB2b2lkIHsKICAgIHByb3RvIDQgMAogICAgLy8gc21hcnRfY29udHJhY3RzL29yYWNsZS9jb250cmFjdC5hbGdvLnRzOjQ4CiAgICAvLyBhc3NlcnQodGhpcy5pc1doaXRlbGlzdGVkKFR4bi5zZW5kZXIpLnZhbHVlLCAnU2VuZGVyIG5vdCB3aGl0ZWxpc3RlZCcpCiAgICB0eG4gU2VuZGVyCiAgICBpbnRjXzEgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL29yYWNsZS9jb250cmFjdC5hbGdvLnRzOjI1CiAgICAvLyBpc1doaXRlbGlzdGVkID0gTG9jYWxTdGF0ZTxib29sZWFuPigpCiAgICBieXRlY18wIC8vICJpc1doaXRlbGlzdGVkIgogICAgLy8gc21hcnRfY29udHJhY3RzL29yYWNsZS9jb250cmFjdC5hbGdvLnRzOjQ4CiAgICAvLyBhc3NlcnQodGhpcy5pc1doaXRlbGlzdGVkKFR4bi5zZW5kZXIpLnZhbHVlLCAnU2VuZGVyIG5vdCB3aGl0ZWxpc3RlZCcpCiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgTG9jYWxTdGF0ZSBleGlzdHMKICAgIGFzc2VydCAvLyBTZW5kZXIgbm90IHdoaXRlbGlzdGVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3JhY2xlL2NvbnRyYWN0LmFsZ28udHM6NTEtNTUKICAgIC8vIGFzc2VydE1hdGNoKHBheW1lbnQsIHsKICAgIC8vICAgc2VuZGVyOiBUeG4uc2VuZGVyLAogICAgLy8gICByZWNlaXZlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICAvLyAgIGFtb3VudDogeyBncmVhdGVyVGhhbkVxOiB0aGlzLmZlZS52YWx1ZSB9LAogICAgLy8gfSkKICAgIGZyYW1lX2RpZyAtNAogICAgZ3R4bnMgU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3JhY2xlL2NvbnRyYWN0LmFsZ28udHM6NTIKICAgIC8vIHNlbmRlcjogVHhuLnNlbmRlciwKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcmFjbGUvY29udHJhY3QuYWxnby50czo1MS01NQogICAgLy8gYXNzZXJ0TWF0Y2gocGF5bWVudCwgewogICAgLy8gICBzZW5kZXI6IFR4bi5zZW5kZXIsCiAgICAvLyAgIHJlY2VpdmVyOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywKICAgIC8vICAgYW1vdW50OiB7IGdyZWF0ZXJUaGFuRXE6IHRoaXMuZmVlLnZhbHVlIH0sCiAgICAvLyB9KQogICAgPT0KICAgIGJ6IHJlcXVlc3REYXRhX2Jvb2xfZmFsc2VANAogICAgZnJhbWVfZGlnIC00CiAgICBndHhucyBSZWNlaXZlcgogICAgLy8gc21hcnRfY29udHJhY3RzL29yYWNsZS9jb250cmFjdC5hbGdvLnRzOjUzCiAgICAvLyByZWNlaXZlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgLy8gc21hcnRfY29udHJhY3RzL29yYWNsZS9jb250cmFjdC5hbGdvLnRzOjUxLTU1CiAgICAvLyBhc3NlcnRNYXRjaChwYXltZW50LCB7CiAgICAvLyAgIHNlbmRlcjogVHhuLnNlbmRlciwKICAgIC8vICAgcmVjZWl2ZXI6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLAogICAgLy8gICBhbW91bnQ6IHsgZ3JlYXRlclRoYW5FcTogdGhpcy5mZWUudmFsdWUgfSwKICAgIC8vIH0pCiAgICA9PQogICAgYnogcmVxdWVzdERhdGFfYm9vbF9mYWxzZUA0CiAgICBmcmFtZV9kaWcgLTQKICAgIGd0eG5zIEFtb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL29yYWNsZS9jb250cmFjdC5hbGdvLnRzOjU0CiAgICAvLyBhbW91bnQ6IHsgZ3JlYXRlclRoYW5FcTogdGhpcy5mZWUudmFsdWUgfSwKICAgIGludGNfMSAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3JhY2xlL2NvbnRyYWN0LmFsZ28udHM6MjIKICAgIC8vIGZlZSA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oKQogICAgYnl0ZWNfMyAvLyAiZmVlIgogICAgLy8gc21hcnRfY29udHJhY3RzL29yYWNsZS9jb250cmFjdC5hbGdvLnRzOjU0CiAgICAvLyBhbW91bnQ6IHsgZ3JlYXRlclRoYW5FcTogdGhpcy5mZWUudmFsdWUgfSwKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3JhY2xlL2NvbnRyYWN0LmFsZ28udHM6NTEtNTUKICAgIC8vIGFzc2VydE1hdGNoKHBheW1lbnQsIHsKICAgIC8vICAgc2VuZGVyOiBUeG4uc2VuZGVyLAogICAgLy8gICByZWNlaXZlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICAvLyAgIGFtb3VudDogeyBncmVhdGVyVGhhbkVxOiB0aGlzLmZlZS52YWx1ZSB9LAogICAgLy8gfSkKICAgID49CiAgICBieiByZXF1ZXN0RGF0YV9ib29sX2ZhbHNlQDQKICAgIGludGNfMCAvLyAxCgpyZXF1ZXN0RGF0YV9ib29sX21lcmdlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3JhY2xlL2NvbnRyYWN0LmFsZ28udHM6NTEtNTUKICAgIC8vIGFzc2VydE1hdGNoKHBheW1lbnQsIHsKICAgIC8vICAgc2VuZGVyOiBUeG4uc2VuZGVyLAogICAgLy8gICByZWNlaXZlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICAvLyAgIGFtb3VudDogeyBncmVhdGVyVGhhbkVxOiB0aGlzLmZlZS52YWx1ZSB9LAogICAgLy8gfSkKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3JhY2xlL2NvbnRyYWN0LmFsZ28udHM6NTcKICAgIC8vIGNvbnN0IHBheW1lbnRBbW91bnQ6IHVpbnQ2NCA9IHBheW1lbnQuYW1vdW50IC0gVWludDY0KDEwMDApIC8vIFN1YnRyYWN0IGZlZQogICAgZnJhbWVfZGlnIC00CiAgICBndHhucyBBbW91bnQKICAgIGludGNfMiAvLyAxMDAwCiAgICAtCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3JhY2xlL2NvbnRyYWN0LmFsZ28udHM6NjAtNjcKICAgIC8vIGl0eG4KICAgIC8vICAgLnBheW1lbnQoewogICAgLy8gICAgIHJlY2VpdmVyOiB0aGlzLndhdGNoZXIudmFsdWUsCiAgICAvLyAgICAgYW1vdW50OiBwYXltZW50QW1vdW50LAogICAgLy8gICAgIGZlZTogVWludDY0KDEwMDApLAogICAgLy8gICAgIG5vdGU6ICdvcmFjbGUtcmVxdWVzdCcsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL29yYWNsZS9jb250cmFjdC5hbGdvLnRzOjYyCiAgICAvLyByZWNlaXZlcjogdGhpcy53YXRjaGVyLnZhbHVlLAogICAgaW50Y18xIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcmFjbGUvY29udHJhY3QuYWxnby50czoyMQogICAgLy8gd2F0Y2hlciA9IEdsb2JhbFN0YXRlPEFjY291bnQ+KCkKICAgIGJ5dGVjXzIgLy8gIndhdGNoZXIiCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3JhY2xlL2NvbnRyYWN0LmFsZ28udHM6NjIKICAgIC8vIHJlY2VpdmVyOiB0aGlzLndhdGNoZXIudmFsdWUsCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL29yYWNsZS9jb250cmFjdC5hbGdvLnRzOjY1CiAgICAvLyBub3RlOiAnb3JhY2xlLXJlcXVlc3QnLAogICAgcHVzaGJ5dGVzICJvcmFjbGUtcmVxdWVzdCIKICAgIGl0eG5fZmllbGQgTm90ZQogICAgaXR4bl9maWVsZCBSZWNlaXZlcgogICAgaXR4bl9maWVsZCBBbW91bnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcmFjbGUvY29udHJhY3QuYWxnby50czo2MC02NgogICAgLy8gaXR4bgogICAgLy8gICAucGF5bWVudCh7CiAgICAvLyAgICAgcmVjZWl2ZXI6IHRoaXMud2F0Y2hlci52YWx1ZSwKICAgIC8vICAgICBhbW91bnQ6IHBheW1lbnRBbW91bnQsCiAgICAvLyAgICAgZmVlOiBVaW50NjQoMTAwMCksCiAgICAvLyAgICAgbm90ZTogJ29yYWNsZS1yZXF1ZXN0JywKICAgIC8vICAgfSkKICAgIGludGNfMCAvLyAxCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3JhY2xlL2NvbnRyYWN0LmFsZ28udHM6NjQKICAgIC8vIGZlZTogVWludDY0KDEwMDApLAogICAgaW50Y18yIC8vIDEwMDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3JhY2xlL2NvbnRyYWN0LmFsZ28udHM6NjAtNjcKICAgIC8vIGl0eG4KICAgIC8vICAgLnBheW1lbnQoewogICAgLy8gICAgIHJlY2VpdmVyOiB0aGlzLndhdGNoZXIudmFsdWUsCiAgICAvLyAgICAgYW1vdW50OiBwYXltZW50QW1vdW50LAogICAgLy8gICAgIGZlZTogVWludDY0KDEwMDApLAogICAgLy8gICAgIG5vdGU6ICdvcmFjbGUtcmVxdWVzdCcsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIHJldHN1YgoKcmVxdWVzdERhdGFfYm9vbF9mYWxzZUA0OgogICAgaW50Y18xIC8vIDAKICAgIGIgcmVxdWVzdERhdGFfYm9vbF9tZXJnZUA1CgoKLy8gc21hcnRfY29udHJhY3RzL29yYWNsZS9jb250cmFjdC5hbGdvLnRzOjpPcmFjbGUub3B0SW5Ub0FwcGxpY2F0aW9uKCkgLT4gdm9pZDoKb3B0SW5Ub0FwcGxpY2F0aW9uOgogICAgLy8gc21hcnRfY29udHJhY3RzL29yYWNsZS9jb250cmFjdC5hbGdvLnRzOjc0LTc1CiAgICAvLyBAYWJpbWV0aG9kKHsgYWxsb3dBY3Rpb25zOiAnT3B0SW4nIH0pCiAgICAvLyBwdWJsaWMgb3B0SW5Ub0FwcGxpY2F0aW9uKCk6IHZvaWQgewogICAgcHJvdG8gMCAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3JhY2xlL2NvbnRyYWN0LmFsZ28udHM6NzcKICAgIC8vIHRoaXMuaXNXaGl0ZWxpc3RlZChUeG4uc2VuZGVyKS52YWx1ZSA9IHRydWUKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcmFjbGUvY29udHJhY3QuYWxnby50czoyNQogICAgLy8gaXNXaGl0ZWxpc3RlZCA9IExvY2FsU3RhdGU8Ym9vbGVhbj4oKQogICAgYnl0ZWNfMCAvLyAiaXNXaGl0ZWxpc3RlZCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcmFjbGUvY29udHJhY3QuYWxnby50czo3NwogICAgLy8gdGhpcy5pc1doaXRlbGlzdGVkKFR4bi5zZW5kZXIpLnZhbHVlID0gdHJ1ZQogICAgaW50Y18wIC8vIDEKICAgIGFwcF9sb2NhbF9wdXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9vcmFjbGUvY29udHJhY3QuYWxnby50czo6T3JhY2xlLnNldFdoaXRlbGlzdChhY2NvdW50OiBieXRlcywgc3RhdHVzOiB1aW50NjQpIC0+IHZvaWQ6CnNldFdoaXRlbGlzdDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcmFjbGUvY29udHJhY3QuYWxnby50czo4Ni04NwogICAgLy8gQGFiaW1ldGhvZCh7IGFsbG93QWN0aW9uczogJ05vT3AnIH0pCiAgICAvLyBwdWJsaWMgc2V0V2hpdGVsaXN0KGFjY291bnQ6IEFjY291bnQsIHN0YXR1czogYm9vbGVhbik6IHZvaWQgewogICAgcHJvdG8gMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3JhY2xlL2NvbnRyYWN0LmFsZ28udHM6ODgKICAgIC8vIGFzc2VydChUeG4uc2VuZGVyID09PSB0aGlzLmFkbWluLnZhbHVlLCAnT25seSBhZG1pbiBjYW4gbW9kaWZ5IHdoaXRlbGlzdCBzdGF0dXMnKQogICAgdHhuIFNlbmRlcgogICAgaW50Y18xIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcmFjbGUvY29udHJhY3QuYWxnby50czoyMAogICAgLy8gYWRtaW4gPSBHbG9iYWxTdGF0ZTxBY2NvdW50PigpCiAgICBieXRlY18xIC8vICJhZG1pbiIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcmFjbGUvY29udHJhY3QuYWxnby50czo4OAogICAgLy8gYXNzZXJ0KFR4bi5zZW5kZXIgPT09IHRoaXMuYWRtaW4udmFsdWUsICdPbmx5IGFkbWluIGNhbiBtb2RpZnkgd2hpdGVsaXN0IHN0YXR1cycpCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgPT0KICAgIGFzc2VydCAvLyBPbmx5IGFkbWluIGNhbiBtb2RpZnkgd2hpdGVsaXN0IHN0YXR1cwogICAgLy8gc21hcnRfY29udHJhY3RzL29yYWNsZS9jb250cmFjdC5hbGdvLnRzOjg5CiAgICAvLyBhc3NlcnQoYWNjb3VudC5pc09wdGVkSW4oR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbklkKSwgJ0FjY291bnQgbXVzdCBvcHQgaW4gdG8gY29udHJhY3QgZmlyc3QnKQogICAgZnJhbWVfZGlnIC0yCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uSUQKICAgIGFwcF9vcHRlZF9pbgogICAgYXNzZXJ0IC8vIEFjY291bnQgbXVzdCBvcHQgaW4gdG8gY29udHJhY3QgZmlyc3QKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcmFjbGUvY29udHJhY3QuYWxnby50czo5MQogICAgLy8gdGhpcy5pc1doaXRlbGlzdGVkKGFjY291bnQpLnZhbHVlID0gc3RhdHVzCiAgICBmcmFtZV9kaWcgLTIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcmFjbGUvY29udHJhY3QuYWxnby50czoyNQogICAgLy8gaXNXaGl0ZWxpc3RlZCA9IExvY2FsU3RhdGU8Ym9vbGVhbj4oKQogICAgYnl0ZWNfMCAvLyAiaXNXaGl0ZWxpc3RlZCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcmFjbGUvY29udHJhY3QuYWxnby50czo5MQogICAgLy8gdGhpcy5pc1doaXRlbGlzdGVkKGFjY291bnQpLnZhbHVlID0gc3RhdHVzCiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9sb2NhbF9wdXQKICAgIHJldHN1Ygo=","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiADAQDoByYEDWlzV2hpdGVsaXN0ZWQFYWRtaW4Hd2F0Y2hlcgNmZWUxG0EAI4IEBLhEezYESED+AAQBo6P/BGjoQh02GgCOBABPACYAGQACI0MxGRREMRhENhoBF8AcNhoCI1OIALkiQzEZIhJEMRhEiACjIkMxGSISRDEYRDEWIglJOBAiEkQ2GgFXAgA2GgIXwDA2GgNXAgCIACEiQzEZFEQxGBREiAACIkOKAAApMgpnKjIKZyuBwIQ9Z4mKBAAxACMoY0REi/w4ADEAEkEAQYv8OAcyChJBADeL/DgIIytlRA9BACsiRIv8OAgkCbEjKmVEgA5vcmFjbGUtcmVxdWVzdLIFsgeyCCKyECSyAbOJI0L/0ooAADEAKCJmiYoCADEAIyllRBJEi/4yCGFEi/4oi/9miQ==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":2,"patch":1}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Oracle contract
 */
export type OracleArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'requestData(pay,string,asset,string)void': {
      /**
       * Payment transaction for the request
       */
      payment: AppMethodCallTransactionArgument
      /**
       * The trading pair to request data for
       */
      pair: string
      /**
       * Asset ID of the callback application
       */
      callbackApp: bigint
      /**
       * Name of the callback method
       */
      callbackMethod: string
    }
    'optInToApplication()void': Record<string, never>
    'setWhitelist(account,bool)void': {
      /**
       * The account to modify whitelist status for
       */
      account: Uint8Array | string
      /**
       * True to whitelist, false to remove from whitelist
       */
      status: boolean
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'requestData(pay,string,asset,string)void': [payment: AppMethodCallTransactionArgument, pair: string, callbackApp: bigint, callbackMethod: string]
    'optInToApplication()void': []
    'setWhitelist(account,bool)void': [account: Uint8Array | string, status: boolean]
  }
}

/**
 * The return type for each method
 */
export type OracleReturns = {
  'createApplication()void': void
  'requestData(pay,string,asset,string)void': void
  'optInToApplication()void': void
  'setWhitelist(account,bool)void': void
}

/**
 * Defines the types of available calls and state of the Oracle smart contract.
 */
export type OracleTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: OracleArgs['obj']['createApplication()void']
      argsTuple: OracleArgs['tuple']['createApplication()void']
      /**
       * void
       */
      returns: OracleReturns['createApplication()void']
    }>
    & Record<'requestData(pay,string,asset,string)void' | 'requestData', {
      argsObj: OracleArgs['obj']['requestData(pay,string,asset,string)void']
      argsTuple: OracleArgs['tuple']['requestData(pay,string,asset,string)void']
      /**
       * void
       */
      returns: OracleReturns['requestData(pay,string,asset,string)void']
    }>
    & Record<'optInToApplication()void' | 'optInToApplication', {
      argsObj: OracleArgs['obj']['optInToApplication()void']
      argsTuple: OracleArgs['tuple']['optInToApplication()void']
      /**
       * void
       */
      returns: OracleReturns['optInToApplication()void']
    }>
    & Record<'setWhitelist(account,bool)void' | 'setWhitelist', {
      argsObj: OracleArgs['obj']['setWhitelist(account,bool)void']
      argsTuple: OracleArgs['tuple']['setWhitelist(account,bool)void']
      /**
       * void
       */
      returns: OracleReturns['setWhitelist(account,bool)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        admin: BinaryState
        watcher: BinaryState
        fee: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        isWhitelisted: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type OracleSignatures = keyof OracleTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type OracleNonVoidMethodSignatures = keyof OracleTypes['methods'] extends infer T ? T extends keyof OracleTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Oracle smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends OracleSignatures> = OracleTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Oracle smart contract to the method's return type
 */
export type MethodReturn<TSignature extends OracleSignatures> = OracleTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = OracleTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = OracleTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type OracleCreateCallParams =
  | Expand<CallParams<OracleArgs['obj']['createApplication()void'] | OracleArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<OracleArgs['obj']['createApplication()void'] | OracleArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type OracleDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: OracleCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Oracle smart contract
 */
export abstract class OracleParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends OracleCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return OracleParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Oracle smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<OracleArgs['obj']['createApplication()void'] | OracleArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available optIn ABI call param factories
   */
  static get optIn() {
    return {
      /**
       * Constructs opt-in ABI call params for the Oracle smart contract using the requestData(pay,string,asset,string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      requestData(params: CallParams<OracleArgs['obj']['requestData(pay,string,asset,string)void'] | OracleArgs['tuple']['requestData(pay,string,asset,string)void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'requestData(pay,string,asset,string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.payment, params.args.pair, params.args.callbackApp, params.args.callbackMethod],
        }
      },
      /**
       * Constructs opt-in ABI call params for the Oracle smart contract using the optInToApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      optInToApplication(params: CallParams<OracleArgs['obj']['optInToApplication()void'] | OracleArgs['tuple']['optInToApplication()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'optInToApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the setWhitelist(account,bool)void ABI method
   *
   * Set whitelist status for an account
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setWhitelist(params: CallParams<OracleArgs['obj']['setWhitelist(account,bool)void'] | OracleArgs['tuple']['setWhitelist(account,bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setWhitelist(account,bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account, params.args.status],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Oracle smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class OracleFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `OracleFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new OracleClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new OracleClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Oracle smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: OracleDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? OracleParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (OracleCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new OracleClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Oracle smart contract using the createApplication()void ABI method.
       *
       * Initialize the contract with default values
       *
       * @param params The params for the smart contract call
       * @returns The create params: void
       */
      createApplication: (params: CallParams<OracleArgs['obj']['createApplication()void'] | OracleArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(OracleParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Oracle smart contract using the createApplication()void ABI method.
       *
       * Initialize the contract with default values
       *
       * @param params The params for the smart contract call
       * @returns The create transaction: void
       */
      createApplication: (params: CallParams<OracleArgs['obj']['createApplication()void'] | OracleArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(OracleParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Oracle smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * Initialize the contract with default values
       *
       * @param params The params for the smart contract call
       * @returns The create result: void
       */
      createApplication: async (params: CallParams<OracleArgs['obj']['createApplication()void'] | OracleArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(OracleParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | OracleReturns['createApplication()void']) }, appClient: new OracleClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Oracle smart contract
 */
export class OracleClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `OracleClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Oracle app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `OracleClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends OracleNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `OracleClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<OracleClient> {
    return new OracleClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `OracleClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<OracleClient> {
    return new OracleClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the Oracle smart contract using the `requestData(pay,string,asset,string)void` ABI method.
       *
       * Request data from the oracle
       *
       * @param params The params for the smart contract call
       * @returns The optIn params: void
       */
      requestData: (params: CallParams<OracleArgs['obj']['requestData(pay,string,asset,string)void'] | OracleArgs['tuple']['requestData(pay,string,asset,string)void']>) => {
        return this.appClient.params.optIn(OracleParamsFactory.optIn.requestData(params))
      },

      /**
       * Opts the user into an existing instance of the Oracle smart contract using the `optInToApplication()void` ABI method.
       *
       * Opt in to the oracle application
       *
       * @param params The params for the smart contract call
       * @returns The optIn params: void
       */
      optInToApplication: (params: CallParams<OracleArgs['obj']['optInToApplication()void'] | OracleArgs['tuple']['optInToApplication()void']> = {args: []}) => {
        return this.appClient.params.optIn(OracleParamsFactory.optIn.optInToApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Oracle smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Oracle smart contract using the `setWhitelist(account,bool)void` ABI method.
     *
     * Set whitelist status for an account
     *
     * @param params The params for the smart contract call
     * @returns The call params: void
     */
    setWhitelist: (params: CallParams<OracleArgs['obj']['setWhitelist(account,bool)void'] | OracleArgs['tuple']['setWhitelist(account,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OracleParamsFactory.setWhitelist(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the Oracle smart contract using the `requestData(pay,string,asset,string)void` ABI method.
       *
       * Request data from the oracle
       *
       * @param params The params for the smart contract call
       * @returns The optIn transaction: void
       */
      requestData: (params: CallParams<OracleArgs['obj']['requestData(pay,string,asset,string)void'] | OracleArgs['tuple']['requestData(pay,string,asset,string)void']>) => {
        return this.appClient.createTransaction.optIn(OracleParamsFactory.optIn.requestData(params))
      },

      /**
       * Opts the user into an existing instance of the Oracle smart contract using the `optInToApplication()void` ABI method.
       *
       * Opt in to the oracle application
       *
       * @param params The params for the smart contract call
       * @returns The optIn transaction: void
       */
      optInToApplication: (params: CallParams<OracleArgs['obj']['optInToApplication()void'] | OracleArgs['tuple']['optInToApplication()void']> = {args: []}) => {
        return this.appClient.createTransaction.optIn(OracleParamsFactory.optIn.optInToApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Oracle smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Oracle smart contract using the `setWhitelist(account,bool)void` ABI method.
     *
     * Set whitelist status for an account
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: void
     */
    setWhitelist: (params: CallParams<OracleArgs['obj']['setWhitelist(account,bool)void'] | OracleArgs['tuple']['setWhitelist(account,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OracleParamsFactory.setWhitelist(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the Oracle smart contract using the `requestData(pay,string,asset,string)void` ABI method.
       *
       * Request data from the oracle
       *
       * @param params The params for the smart contract call
       * @returns The optIn result: void
       */
      requestData: async (params: CallParams<OracleArgs['obj']['requestData(pay,string,asset,string)void'] | OracleArgs['tuple']['requestData(pay,string,asset,string)void']> & SendParams) => {
        const result = await this.appClient.send.optIn(OracleParamsFactory.optIn.requestData(params))
        return {...result, return: result.return as unknown as (undefined | OracleReturns['requestData(pay,string,asset,string)void'])}
      },

      /**
       * Opts the user into an existing instance of the Oracle smart contract using the `optInToApplication()void` ABI method.
       *
       * Opt in to the oracle application
       *
       * @param params The params for the smart contract call
       * @returns The optIn result: void
       */
      optInToApplication: async (params: CallParams<OracleArgs['obj']['optInToApplication()void'] | OracleArgs['tuple']['optInToApplication()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.optIn(OracleParamsFactory.optIn.optInToApplication(params))
        return {...result, return: result.return as unknown as (undefined | OracleReturns['optInToApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Oracle smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Oracle smart contract using the `setWhitelist(account,bool)void` ABI method.
     *
     * Set whitelist status for an account
     *
     * @param params The params for the smart contract call
     * @returns The call result: void
     */
    setWhitelist: async (params: CallParams<OracleArgs['obj']['setWhitelist(account,bool)void'] | OracleArgs['tuple']['setWhitelist(account,bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OracleParamsFactory.setWhitelist(params))
      return {...result, return: result.return as unknown as (undefined | OracleReturns['setWhitelist(account,bool)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new OracleClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Oracle app
   */
  state = {
    /**
     * Methods to access global state for the current Oracle app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: new BinaryStateValue(result.admin),
          watcher: new BinaryStateValue(result.watcher),
          fee: result.fee,
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("admin")) as Uint8Array | undefined) },
      /**
       * Get the current value of the watcher key in global state
       */
      watcher: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("watcher")) as Uint8Array | undefined) },
      /**
       * Get the current value of the fee key in global state
       */
      fee: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("fee")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current Oracle app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            isWhitelisted: result.isWhitelisted,
          }
        },
        /**
         * Get the current value of the isWhitelisted key in local state
         */
        isWhitelisted: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("isWhitelisted")) as bigint | undefined },
      }
    },
  }

  public newGroup(): OracleComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a setWhitelist(account,bool)void method call against the Oracle contract
       */
      setWhitelist(params: CallParams<OracleArgs['obj']['setWhitelist(account,bool)void'] | OracleArgs['tuple']['setWhitelist(account,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setWhitelist(params)))
        resultMappers.push(undefined)
        return this
      },
      get optIn() {
        return {
          requestData: (params: CallParams<OracleArgs['obj']['requestData(pay,string,asset,string)void'] | OracleArgs['tuple']['requestData(pay,string,asset,string)void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIn.requestData(params)))
            resultMappers.push(undefined)
            return this
          },
          optInToApplication: (params: CallParams<OracleArgs['obj']['optInToApplication()void'] | OracleArgs['tuple']['optInToApplication()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIn.optInToApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the Oracle contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as OracleComposer
  }
}
export type OracleComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the setWhitelist(account,bool)void ABI method.
   *
   * Set whitelist status for an account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setWhitelist(params?: CallParams<OracleArgs['obj']['setWhitelist(account,bool)void'] | OracleArgs['tuple']['setWhitelist(account,bool)void']>): OracleComposer<[...TReturns, OracleReturns['setWhitelist(account,bool)void'] | undefined]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the Oracle smart contract using the requestData(pay,string,asset,string)void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    requestData(params?: CallParams<OracleArgs['obj']['requestData(pay,string,asset,string)void'] | OracleArgs['tuple']['requestData(pay,string,asset,string)void']>): OracleComposer<[...TReturns, OracleReturns['requestData(pay,string,asset,string)void'] | undefined]>
    /**
     * Opts the user into an existing instance of the Oracle smart contract using the optInToApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optInToApplication(params?: CallParams<OracleArgs['obj']['optInToApplication()void'] | OracleArgs['tuple']['optInToApplication()void']>): OracleComposer<[...TReturns, OracleReturns['optInToApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Oracle smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): OracleComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): OracleComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<OracleComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<OracleComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<OracleComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<OracleComposerResults<TReturns>>
}
export type OracleComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

